!function(){"use strict";var e,t={726:function(e,t,n){var r=n(294),o=n(935),u=n(647),i=n(949);function c(e){return(c="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}var f=function(e,t,n,r){var o,u=arguments.length,i=u<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"===("undefined"==typeof Reflect?"undefined":c(Reflect))&&"function"==typeof Reflect.decorate)i=Reflect.decorate(e,t,n,r);else for(var f=e.length-1;f>=0;f--)(o=e[f])&&(i=(u<3?o(i):u>3?o(t,n,i):o(t,n))||i);return u>3&&i&&Object.defineProperty(t,n,i),i},l=new(function(){function e(){var e=this;this.count=0,this.name="ry",this.addCount=function(){e.count+=1},(0,i.rC)(this)}return f([i.LO],e.prototype,"count",void 0),f([i.LO],e.prototype,"name",void 0),f([i.aD],e.prototype,"addCount",void 0),e}()),a=(new function(){this.time=11111111110,(0,i.ky)(this)},r.createContext(l)),d=function(){return r.useContext(a)},p=(0,u.Pi)((function(){var e=d(),t=e.count,n=e.addCount;return r.createElement("div",null,r.createElement("p",{key:t,id:"wordAnimation"},"count: ",t),r.createElement("button",{onClick:n},"addCount"))})),s=(0,u.Pi)((function(){var e=d().name;return console.log("NameRerendered"),r.createElement("div",null,r.createElement("p",null,"name: ",e),"bu")}));function y(){return r.createElement("div",null,r.createElement(p,null),r.createElement(s,null))}o.render(r.createElement(y,null),document.getElementById("root"))}},n={};function r(e){var o=n[e];if(void 0!==o)return o.exports;var u=n[e]={exports:{}};return t[e](u,u.exports,r),u.exports}r.m=t,e=[],r.O=function(t,n,o,u){if(!n){var i=1/0;for(a=0;a<e.length;a++){n=e[a][0],o=e[a][1],u=e[a][2];for(var c=!0,f=0;f<n.length;f++)(!1&u||i>=u)&&Object.keys(r.O).every((function(e){return r.O[e](n[f])}))?n.splice(f--,1):(c=!1,u<i&&(i=u));if(c){e.splice(a--,1);var l=o();void 0!==l&&(t=l)}}return t}u=u||0;for(var a=e.length;a>0&&e[a-1][2]>u;a--)e[a]=e[a-1];e[a]=[n,o,u]},r.d=function(e,t){for(var n in t)r.o(t,n)&&!r.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},r.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},function(){var e={179:0};r.O.j=function(t){return 0===e[t]};var t=function(t,n){var o,u,i=n[0],c=n[1],f=n[2],l=0;if(i.some((function(t){return 0!==e[t]}))){for(o in c)r.o(c,o)&&(r.m[o]=c[o]);if(f)var a=f(r)}for(t&&t(n);l<i.length;l++)u=i[l],r.o(e,u)&&e[u]&&e[u][0](),e[i[l]]=0;return r.O(a)},n=self.webpackChunkframework=self.webpackChunkframework||[];n.forEach(t.bind(null,0)),n.push=t.bind(null,n.push.bind(n))}();var o=r.O(void 0,[216],(function(){return r(726)}));o=r.O(o)}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,